[project]
name = "semester-2025-fall"
version = "0.1.0"
description = "Course management for KPC Fall 2025"
requires-python = ">=3.13"
dependencies = [
    "jinja2>=3.1.2",
    "pyyaml>=6.0",
    "jsonschema>=4.17.3",
    "python-dateutil>=2.8.2",
    "pytz>=2023.3",
    "markdown>=3.4.3",
    "flask>=3.1.2",
    "flask-cors>=6.0.1",
]

[project.optional-dependencies]
dashboard = [
    "flask>=3.0",
    "watchdog>=3.0",
    "flask-cors>=4.0",
    "python-dotenv>=1.0",
]
solver = [
    "ortools>=9.10",
]
testing = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-flask>=1.3.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "coverage[toml]>=7.3.0",
    "faker>=20.0.0",
    "hypothesis>=6.0.0",
    "beautifulsoup4>=4.12.0",
]
dev = [
    "black>=23.0.0",
    "pylint>=3.0.0",
    "mypy>=1.5.0",
    "ruff>=0.1.0",
]

[tool.uv]
package = false
dev-dependencies = [
    "bandit>=1.8.6",
    "beautifulsoup4>=4.13.4",
    "faker>=37.5.3",
    "hypothesis>=6.138.2",
    "pre-commit>=4.0.0",
    "pytest-cov>=6.2.1",
    "pytest-flask>=1.3.0",
    "pytest-mock>=3.14.1",
    "pytest-xdist>=3.8.0",
    "types-jsonschema>=4.25.1.20250822",
    "types-markdown>=3.8.0.20250809",
    "types-python-dateutil>=2.9.0.20250822",
    "types-pytz>=2025.2.0.20250809",
    "types-pyyaml>=6.0.12.20250822",
]

[tool.ruff]
target-version = "py313"
line-length = 100
fix = true
src = ["dashboard", "scripts"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    "docs/reference",
    "tests",
]

[tool.ruff.lint]
select = ["E","F","I","UP","B","SIM","ARG","RUF"]
ignore = [
    "D",    # pydocstyle disabled for now (docstrings enforced via other means)
    "E501", # line too long (handled by formatter)
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "W191", # indentation contains tabs
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["dashboard", "scripts"]

[tool.black]
line-length = 100
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.venv
  | build
  | dist
  | docs/reference
)/
'''

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=dashboard",
    "--cov=scripts",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "-W", "error::DeprecationWarning",
    "-W", "error::PendingDeprecationWarning",
    "-W", "error::FutureWarning",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "property: Property-based tests",
    "slow: Slow tests",
    "ci: CI-specific tests",
]
filterwarnings = [
    "error::DeprecationWarning",
    "error::PendingDeprecationWarning",
    "error::FutureWarning",
    # Allow specific known deprecations temporarily
    "ignore::DeprecationWarning:flask.sessions",
]

[tool.coverage.run]
source = ["dashboard", "scripts"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/docs/*",
    # Exclude CLI scripts and app runner from coverage to focus on core libs
    "scripts/*",
    "dashboard/app.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
precision = 2
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"
