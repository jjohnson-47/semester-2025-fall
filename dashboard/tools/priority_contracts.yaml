# Priority Contracts - Tunable Strategy for Smart Task Prioritization
# Fall 2025 Semester - Anchorage Timeline
#
# This file defines the prioritization strategy without changing code.
# Adjust coefficients, phases, and biases to match your workflow.

# ═══════════════════════════════════════════════════════════════════════════
# SCORING COEFFICIENTS
# ═══════════════════════════════════════════════════════════════════════════
coefficients:
  # Base priority from due dates (your existing logic)
  alpha_due: 1.0

  # Critical chain weight (sum of weights along heaviest path to anchor)
  beta_critical: 2.5

  # Unblock impact (number of blocked descendants)
  gamma_impact: 3.0

  # Anchor proximity (inverse of steps to nearest anchor)
  delta_proximity: 1.5

  # Chain head boost (next actionable task in chain)
  epsilon_head: 10.0

  # Phase and category adjustments
  zeta_phase: 0.5

# ═══════════════════════════════════════════════════════════════════════════
# PHASE DEFINITIONS
# ═══════════════════════════════════════════════════════════════════════════
# Phases adjust priority based on time relative to semester start
phases:
  prelaunch:
    name: "Pre-Launch"
    start_days: -30  # 30 days before semester
    end_days: -8     # 8 days before semester
    category_boosts:
      setup: 5.0
      technical: 4.0
      materials: 3.0
      content: 2.0
      assessment: 1.0
      communication: 0.5
    description: "Focus on infrastructure and content preparation"

  launch_week:
    name: "Launch Week"
    start_days: -7   # 7 days before semester
    end_days: 0      # Semester start day
    category_boosts:
      technical: 5.0
      assessment: 4.0
      communication: 3.0
      setup: 2.0
      content: 1.5
      materials: 1.0
    description: "Final testing, gradebook setup, and welcome comms"

  week_one:
    name: "Week One"
    start_days: 1    # Day 1 of semester
    end_days: 7      # End of first week
    category_boosts:
      communication: 5.0
      technical: 3.0
      assessment: 2.0
      content: 1.5
      setup: 0.5
      materials: 0.5
    description: "Student support and real-time adjustments"

  in_term:
    name: "In Term"
    start_days: 8    # Week 2 onwards
    end_days: 120    # Through semester
    category_boosts:
      assessment: 3.0
      communication: 2.5
      content: 2.0
      materials: 1.5
      technical: 1.0
      setup: 0.5
    description: "Steady-state teaching and grading rhythm"

# ═══════════════════════════════════════════════════════════════════════════
# ANCHOR DEFINITIONS
# ═══════════════════════════════════════════════════════════════════════════
# Tasks that represent major milestones - everything flows toward these
anchors:
  - id_suffix: "COURSE-READY"
    weight_multiplier: 5.0
    description: "Course ready for student access"

  - id_suffix: "OPEN-COURSE"
    weight_multiplier: 3.0
    description: "Course opened to students"

  - id_suffix: "QA-STUDENT-PREVIEW"
    weight_multiplier: 2.0
    description: "Quality assurance complete"

  # Optional global root
  - id: "FALL-2025-ROOT"
    weight_multiplier: 10.0
    description: "All courses ready"

# ═══════════════════════════════════════════════════════════════════════════
# NOW QUEUE CONFIGURATION
# ═══════════════════════════════════════════════════════════════════════════
now_queue:
  # Total tasks to show in Now Queue
  max_items: 7

  # Maximum tasks per course (prevents one course from dominating)
  per_course_limit: 3

  # Ensure at least one task from each course if available
  ensure_each_course: true

  # Prefer chain heads even if score is slightly lower
  chain_head_preference: 1.2  # Chain heads get 20% boost for queue selection

  # Include blocked tasks that are close to being unblocked
  include_near_unblocked: false
  near_unblocked_threshold: 1  # How many deps away counts as "near"

# ═══════════════════════════════════════════════════════════════════════════
# SPECIAL PINS AND OVERRIDES
# ═══════════════════════════════════════════════════════════════════════════
# Force specific tasks to top during critical periods
pins:
  # Pin by exact ID
  by_id:
    # - "MATH221-2025F-SYLLABUS-GENERATE"  # Example: uncomment to pin
    # - "STAT253-2025F-R-SETUP"

  # Pin by ID suffix pattern
  by_suffix:
    # - "SYLLABUS-REVIEW"  # Example: all syllabus reviews
    # - "ROSTER-ROLES"     # Example: all roster checks

  # Boost multiplier for pinned tasks
  pin_boost: 100.0

# ═══════════════════════════════════════════════════════════════════════════
# DECAY AND STALENESS
# ═══════════════════════════════════════════════════════════════════════════
# Reduce priority of tasks that have been "todo" too long without progress
staleness:
  enabled: true
  days_until_stale: 14  # Task considered stale after 2 weeks in todo
  stale_penalty: -5.0    # Reduction in smart_score per day after staleness
  max_penalty: -50.0     # Maximum staleness penalty

# ═══════════════════════════════════════════════════════════════════════════
# CRITICAL PATH DETECTION
# ═══════════════════════════════════════════════════════════════════════════
critical_path:
  # Method for computing critical chain weight
  # Options: "sum" (add all weights), "max" (longest single path), "hybrid"
  method: "sum"

  # Include completed tasks in chain weight calculation
  include_completed: false

  # Discount factor for each hop away from anchor (0.9 = 10% reduction per hop)
  distance_decay: 0.95

# ═══════════════════════════════════════════════════════════════════════════
# CATEGORY DEFAULTS
# ═══════════════════════════════════════════════════════════════════════════
# Base weights for categories (can be overridden by phases)
category_base_weights:
  setup: 1.0
  content: 1.0
  technical: 1.0
  materials: 1.0
  assessment: 1.0
  communication: 1.0

# ═══════════════════════════════════════════════════════════════════════════
# LLM RERANKING (Optional)
# ═══════════════════════════════════════════════════════════════════════════
llm_rerank:
  enabled: false
  model: "gpt-4o-mini"
  temperature: 0.3
  max_candidates: 20  # Send top N to LLM for reranking
  require_justification: true
  fallback_on_error: true  # Use deterministic order if LLM fails

  # Context to include with each task
  include_context:
    - "title"
    - "description"
    - "category"
    - "due_date"
    - "depends_on"
    - "weight"
    - "smart_score"

  # System prompt template
  system_prompt: |
    You are a course preparation assistant. Given a list of tasks with dependencies,
    select the 5 most strategic tasks to work on TODAY. Consider:
    1. Dependencies (can't do blocked work)
    2. Impact (unblocking future work)
    3. Urgency (due dates)
    4. Efficiency (batching similar work)
    Return ONLY task IDs in priority order with brief (5-10 word) justifications.

# ═══════════════════════════════════════════════════════════════════════════
# LOGGING AND DEBUGGING
# ═══════════════════════════════════════════════════════════════════════════
debug:
  # Show detailed scoring breakdown in console
  verbose_scoring: false

  # Write scoring details to file
  score_log_file: "dashboard/logs/scoring.log"

  # Include scoring breakdown in task JSON
  include_score_breakdown: true

  # Show dependency chains in output
  show_chains: true

  # Highlight critical path in visualizations
  highlight_critical: true
