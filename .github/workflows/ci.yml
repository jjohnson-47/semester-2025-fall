name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.13.6"
  UV_VERSION: "0.5.14"
  UV_CACHE_DIR: /tmp/.uv-cache

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  format:
    name: Format & Lint
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}

      - name: Set up UV
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          version: ${{ env.UV_VERSION }}

      - name: Set up Python
        run: |
          uv python install ${{ env.PYTHON_VERSION }}
          uv python pin ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev

      - name: Run Ruff format check
        id: ruff_format
        run: |
          uv run ruff format --check . || echo "needs_format=true" >> $GITHUB_OUTPUT

      - name: Run Ruff linter
        id: ruff_lint
        run: |
          uv run ruff check . --output-format=github || echo "needs_fix=true" >> $GITHUB_OUTPUT

      - name: Auto-fix formatting (PR only)
        if: github.event_name == 'pull_request' && (steps.ruff_format.outputs.needs_format == 'true' || steps.ruff_lint.outputs.needs_fix == 'true')
        run: |
          # Format code
          uv run ruff format .
          
          # Fix auto-fixable linting issues
          uv run ruff check . --fix --unsafe-fixes
          
          # Check if there are changes
          if [[ -n $(git status --porcelain) ]]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add -A
            git commit -m "ci: auto-format and fix linting issues"
            git push
          fi

      - name: Run Black check
        run: |
          uv run black --check scripts/ dashboard/ tests/

      - name: Run type checking
        run: |
          uv run mypy scripts/ dashboard/ --ignore-missing-imports

  validate:
    name: Validate JSON & Schemas
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up UV
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          version: ${{ env.UV_VERSION }}

      - name: Set up Python
        run: |
          uv python install ${{ env.PYTHON_VERSION }}
          uv python pin ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          uv sync

      - name: Validate JSON files
        run: |
          uv run python scripts/validate_json.py --strict

      - name: Check calendar generation
        run: |
          uv run python scripts/utils/semester_calendar.py --check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13", "3.12"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up UV
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          version: ${{ env.UV_VERSION }}

      - name: Set up Python ${{ matrix.python-version }}
        run: |
          uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          uv sync --all-extras

      - name: Run unit tests
        run: |
          uv run pytest tests/unit -v --cov=dashboard --cov=scripts --cov-report=xml --cov-report=term

      - name: Run integration tests
        run: |
          uv run pytest tests/integration -v

      - name: Run property tests
        run: |
          uv run pytest tests/ -m property -v

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.python-version }}

  build:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: [validate, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up UV
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          version: ${{ env.UV_VERSION }}

      - name: Set up Python
        run: |
          uv python install ${{ env.PYTHON_VERSION }}
          uv python pin ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          uv sync --all-extras

      - name: Build syllabi
        run: |
          uv run python scripts/build_syllabi.py --ci

      - name: Build schedules
        run: |
          uv run python scripts/build_schedules.py --ci

      - name: Build Blackboard packages
        run: |
          uv run python scripts/build_bb_packages.py --ci

      - name: Generate dashboard tasks
        run: |
          uv run python dashboard/tools/generate_tasks.py \
            --courses dashboard/state/courses.json \
            --templates dashboard/templates_src \
            --out dashboard/state/tasks.json

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            build/
            dashboard/state/tasks.json
          retention-days: 7

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: [validate]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up UV
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          version: ${{ env.UV_VERSION }}

      - name: Set up Python
        run: |
          uv python install ${{ env.PYTHON_VERSION }}
          uv python pin ${{ env.PYTHON_VERSION }}

      - name: Install documentation dependencies
        run: |
          uv pip install sphinx sphinx-rtd-theme myst-parser

      - name: Build documentation
        run: |
          uv run sphinx-build -b html docs docs/_build/html -W

      - name: Check documentation coverage
        run: |
          uv run sphinx-build -b coverage docs docs/_build/coverage
          cat docs/_build/coverage/python.txt

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/_build/html/
          retention-days: 30

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up UV
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          version: ${{ env.UV_VERSION }}

      - name: Set up Python
        run: |
          uv python install ${{ env.PYTHON_VERSION }}
          uv python pin ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          uv sync --all-extras

      - name: Check for security vulnerabilities
        run: |
          uv pip install safety
          uv run safety check --json

      - name: Run Bandit security linter
        run: |
          uv pip install bandit[toml]
          uv run bandit -r dashboard/ scripts/ -f json -o bandit-report.json

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
          retention-days: 30

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-artifacts

      - name: Comment PR with preview info
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸš€ **Preview Ready!**\n\nBuild artifacts have been generated successfully.\n\n**Test Results:** âœ… All tests passing\n**Coverage:** ðŸ“Š Check coverage report in artifacts\n**Documentation:** ðŸ“š Available in artifacts\n\n---\n*This is an automated message from the CI/CD pipeline.*'
            })