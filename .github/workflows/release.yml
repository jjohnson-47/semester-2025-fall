name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v2.1.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: "3.13.6"
  UV_VERSION: "0.5.14"

jobs:
  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up UV
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          version: ${{ env.UV_VERSION }}

      - name: Set up Python
        run: |
          uv python install ${{ env.PYTHON_VERSION }}
          uv python pin ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          uv sync --all-extras

      - name: Run full test suite
        run: |
          uv run pytest tests/ -v --cov=dashboard --cov=scripts

      - name: Build all course materials
        run: |
          # Build everything
          make all

          # Create release archives
          mkdir -p release

          # Package syllabi
          cd build/syllabi && tar -czf ../../release/syllabi.tar.gz * && cd ../..

          # Package schedules
          cd build/schedules && tar -czf ../../release/schedules.tar.gz * && cd ../..

          # Package Blackboard packages
          cd build/blackboard && tar -czf ../../release/blackboard-packages.tar.gz * && cd ../..

          # Package weekly materials
          if [ -d "build/weekly" ]; then
            cd build/weekly && tar -czf ../../release/weekly-materials.tar.gz * && cd ../..
          fi

      - name: Build documentation
        run: |
          uv pip install sphinx sphinx-rtd-theme myst-parser
          uv run sphinx-build -b html docs docs/_build/html
          cd docs/_build/html && tar -czf ../../../release/documentation.tar.gz * && cd ../../..

      - name: Generate changelog
        id: changelog
        run: |
          echo "# Changelog" > CHANGELOG_RELEASE.md
          echo "" >> CHANGELOG_RELEASE.md

          # Get version
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi

          echo "## $VERSION - $(date +'%Y-%m-%d')" >> CHANGELOG_RELEASE.md
          echo "" >> CHANGELOG_RELEASE.md

          # Generate changelog from commits
          if git describe --tags --abbrev=0 HEAD^ 2>/dev/null; then
            PREV_TAG=$(git describe --tags --abbrev=0 HEAD^)
            git log $PREV_TAG..HEAD --pretty=format:"- %s (%h)" >> CHANGELOG_RELEASE.md
          else
            git log --pretty=format:"- %s (%h)" -n 20 >> CHANGELOG_RELEASE.md
          fi

          echo "" >> CHANGELOG_RELEASE.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || github.ref_name }}
          name: Release ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || github.ref_name }}
          body_path: CHANGELOG_RELEASE.md
          draft: false
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
          files: |
            release/*.tar.gz
          generate_release_notes: true

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ github.ref_name }}
          path: release/
          retention-days: 90

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: build-release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up UV
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          version: ${{ env.UV_VERSION }}

      - name: Set up Python
        run: |
          uv python install ${{ env.PYTHON_VERSION }}
          uv python pin ${{ env.PYTHON_VERSION }}

      - name: Install documentation dependencies
        run: |
          uv pip install sphinx sphinx-rtd-theme myst-parser

      - name: Build documentation
        run: |
          uv run sphinx-build -b html docs docs/_build/html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html
          cname: semester2025.docs.example.com

  notify:
    name: Send Release Notifications
    runs-on: ubuntu-latest
    needs: [build-release, deploy-docs]
    if: always()
    steps:
      - name: Send notification
        run: |
          echo "Release ${{ github.ref_name }} has been created"
          echo "Documentation has been deployed"
          # Add webhook notifications here if needed
